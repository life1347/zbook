// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: invitation.sql

package db

import (
	"context"
)

const createInvitation = `-- name: CreateInvitation :one
INSERT INTO invitations (
  email,
  invitation_url
) VALUES (
  $1, $2
) RETURNING invitation_id, email, invitation_url, is_used, created_at, expired_at
`

type CreateInvitationParams struct {
	Email         string `json:"email"`
	InvitationUrl string `json:"invitation_url"`
}

func (q *Queries) CreateInvitation(ctx context.Context, arg CreateInvitationParams) (Invitation, error) {
	row := q.db.QueryRow(ctx, createInvitation, arg.Email, arg.InvitationUrl)
	var i Invitation
	err := row.Scan(
		&i.InvitationID,
		&i.Email,
		&i.InvitationUrl,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getInvitation = `-- name: GetInvitation :one
SELECT invitation_id, email, invitation_url, is_used, created_at, expired_at
FROM invitations
WHERE email = $1 AND invitation_url = $2
`

type GetInvitationParams struct {
	Email         string `json:"email"`
	InvitationUrl string `json:"invitation_url"`
}

func (q *Queries) GetInvitation(ctx context.Context, arg GetInvitationParams) (Invitation, error) {
	row := q.db.QueryRow(ctx, getInvitation, arg.Email, arg.InvitationUrl)
	var i Invitation
	err := row.Scan(
		&i.InvitationID,
		&i.Email,
		&i.InvitationUrl,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const markInvitationAsUsed = `-- name: MarkInvitationAsUsed :one
UPDATE invitations
SET
    is_used = TRUE
WHERE
    email = $1 AND invitation_url = $2
    AND is_used = FALSE
    AND expired_at > now()
RETURNING invitation_id, email, invitation_url, is_used, created_at, expired_at
`

type MarkInvitationAsUsedParams struct {
	Email         string `json:"email"`
	InvitationUrl string `json:"invitation_url"`
}

func (q *Queries) MarkInvitationAsUsed(ctx context.Context, arg MarkInvitationAsUsedParams) (Invitation, error) {
	row := q.db.QueryRow(ctx, markInvitationAsUsed, arg.Email, arg.InvitationUrl)
	var i Invitation
	err := row.Scan(
		&i.InvitationID,
		&i.Email,
		&i.InvitationUrl,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
