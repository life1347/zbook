// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: notifications.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCommentNotification = `-- name: CreateCommentNotification :one
INSERT INTO comment_notifications (
    user_id,
    comment_id
) VALUES ($1,$2)
RETURNING noti_id, user_id, comment_id, readed, created_at
`

type CreateCommentNotificationParams struct {
	UserID    int64 `json:"user_id"`
	CommentID int64 `json:"comment_id"`
}

func (q *Queries) CreateCommentNotification(ctx context.Context, arg CreateCommentNotificationParams) (CommentNotification, error) {
	row := q.db.QueryRow(ctx, createCommentNotification, arg.UserID, arg.CommentID)
	var i CommentNotification
	err := row.Scan(
		&i.NotiID,
		&i.UserID,
		&i.CommentID,
		&i.Readed,
		&i.CreatedAt,
	)
	return i, err
}

const createFollowerNotification = `-- name: CreateFollowerNotification :one
INSERT INTO follower_notifications (
    user_id,
    follower_id
) VALUES ($1,$2)
RETURNING noti_id, user_id, follower_id, readed, created_at
`

type CreateFollowerNotificationParams struct {
	UserID     int64 `json:"user_id"`
	FollowerID int64 `json:"follower_id"`
}

func (q *Queries) CreateFollowerNotification(ctx context.Context, arg CreateFollowerNotificationParams) (FollowerNotification, error) {
	row := q.db.QueryRow(ctx, createFollowerNotification, arg.UserID, arg.FollowerID)
	var i FollowerNotification
	err := row.Scan(
		&i.NotiID,
		&i.UserID,
		&i.FollowerID,
		&i.Readed,
		&i.CreatedAt,
	)
	return i, err
}

const createRepoNotification = `-- name: CreateRepoNotification :one
INSERT INTO repo_notifications (
    user_id,
    repo_id
) VALUES ($1,$2)
RETURNING noti_id, user_id, repo_id, readed, created_at
`

type CreateRepoNotificationParams struct {
	UserID int64 `json:"user_id"`
	RepoID int64 `json:"repo_id"`
}

func (q *Queries) CreateRepoNotification(ctx context.Context, arg CreateRepoNotificationParams) (RepoNotification, error) {
	row := q.db.QueryRow(ctx, createRepoNotification, arg.UserID, arg.RepoID)
	var i RepoNotification
	err := row.Scan(
		&i.NotiID,
		&i.UserID,
		&i.RepoID,
		&i.Readed,
		&i.CreatedAt,
	)
	return i, err
}

const createSystemNotification = `-- name: CreateSystemNotification :one
INSERT INTO system_notifications (
    user_id,
    title,
    contents,
    redirect_url
) VALUES ($1,$2,$3,$4)
RETURNING noti_id, user_id, title, contents, redirect_url, readed, created_at
`

type CreateSystemNotificationParams struct {
	UserID      int64       `json:"user_id"`
	Title       string      `json:"title"`
	Contents    string      `json:"contents"`
	RedirectUrl pgtype.Text `json:"redirect_url"`
}

func (q *Queries) CreateSystemNotification(ctx context.Context, arg CreateSystemNotificationParams) (SystemNotification, error) {
	row := q.db.QueryRow(ctx, createSystemNotification,
		arg.UserID,
		arg.Title,
		arg.Contents,
		arg.RedirectUrl,
	)
	var i SystemNotification
	err := row.Scan(
		&i.NotiID,
		&i.UserID,
		&i.Title,
		&i.Contents,
		&i.RedirectUrl,
		&i.Readed,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFollowerNotification = `-- name: DeleteFollowerNotification :one
DELETE FROM follower_notifications
WHERE user_id=$1 and follower_id=$2
RETURNING noti_id, user_id, follower_id, readed, created_at
`

type DeleteFollowerNotificationParams struct {
	UserID     int64 `json:"user_id"`
	FollowerID int64 `json:"follower_id"`
}

func (q *Queries) DeleteFollowerNotification(ctx context.Context, arg DeleteFollowerNotificationParams) (FollowerNotification, error) {
	row := q.db.QueryRow(ctx, deleteFollowerNotification, arg.UserID, arg.FollowerID)
	var i FollowerNotification
	err := row.Scan(
		&i.NotiID,
		&i.UserID,
		&i.FollowerID,
		&i.Readed,
		&i.CreatedAt,
	)
	return i, err
}

const getListCommentNotificationUnreadedCount = `-- name: GetListCommentNotificationUnreadedCount :one
SELECT 
  Count(*)
FROM 
    users
JOIN 
    comments ON comments.user_id=users.user_id
JOIN 
    markdowns ON markdowns.markdown_id=comments.markdown_id
JOIN 
    comment_notifications ON comment_notifications.comment_id=comments.comment_id
WHERE 
    comment_notifications.user_id=$1 AND (comment_notifications.readed = 'false')
`

func (q *Queries) GetListCommentNotificationUnreadedCount(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getListCommentNotificationUnreadedCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getListFollowerNotificationUnreadedCount = `-- name: GetListFollowerNotificationUnreadedCount :one
SELECT 
   Count(*)
FROM 
    users
JOIN
    follower_notifications ON users.user_id = follower_notifications.follower_id
WHERE 
    follower_notifications.user_id=$1 AND (follower_notifications.readed = 'false')
`

func (q *Queries) GetListFollowerNotificationUnreadedCount(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getListFollowerNotificationUnreadedCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getListRepoNotificationUnreadedCount = `-- name: GetListRepoNotificationUnreadedCount :one
SELECT 
   Count(*)
FROM repo_notifications
JOIN repos ON repos.repo_id = repo_notifications.repo_id
JOIN users ON users.user_id = repos.user_id
WHERE repo_notifications.user_id=$1  AND (repo_notifications.readed = 'false' )
`

func (q *Queries) GetListRepoNotificationUnreadedCount(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getListRepoNotificationUnreadedCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getListSystemNotificationUnReadedCount = `-- name: GetListSystemNotificationUnReadedCount :one
SELECT Count(*)
FROM system_notifications
WHERE user_id=$1 AND (system_notifications.readed = 'false')
`

func (q *Queries) GetListSystemNotificationUnReadedCount(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getListSystemNotificationUnReadedCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listCommentNotification = `-- name: ListCommentNotification :many
SELECT 
    users.username,users.email,ru.username as repo_username,
    comment_notifications.readed, comment_notifications.noti_id,comment_notifications.created_at,
    markdowns.repo_id,markdowns.relative_path,comments.comment_content,repos.repo_name
FROM 
    users
JOIN 
    comments ON comments.user_id=users.user_id
JOIN 
    markdowns ON markdowns.markdown_id=comments.markdown_id
JOIN repos ON repos.repo_id = markdowns.repo_id
JOIN users as ru ON repos.user_id = ru.user_id
JOIN 
    comment_notifications ON comment_notifications.comment_id=comments.comment_id
WHERE 
    comment_notifications.user_id=$1 AND (comment_notifications.readed = 'false' OR comment_notifications.created_at >= NOW() - INTERVAL '14 days')
ORDER BY 
    comment_notifications.created_at DESC
LIMIT $2
OFFSET $3
`

type ListCommentNotificationParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListCommentNotificationRow struct {
	Username       string    `json:"username"`
	Email          string    `json:"email"`
	RepoUsername   string    `json:"repo_username"`
	Readed         bool      `json:"readed"`
	NotiID         int64     `json:"noti_id"`
	CreatedAt      time.Time `json:"created_at"`
	RepoID         int64     `json:"repo_id"`
	RelativePath   string    `json:"relative_path"`
	CommentContent string    `json:"comment_content"`
	RepoName       string    `json:"repo_name"`
}

func (q *Queries) ListCommentNotification(ctx context.Context, arg ListCommentNotificationParams) ([]ListCommentNotificationRow, error) {
	rows, err := q.db.Query(ctx, listCommentNotification, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListCommentNotificationRow{}
	for rows.Next() {
		var i ListCommentNotificationRow
		if err := rows.Scan(
			&i.Username,
			&i.Email,
			&i.RepoUsername,
			&i.Readed,
			&i.NotiID,
			&i.CreatedAt,
			&i.RepoID,
			&i.RelativePath,
			&i.CommentContent,
			&i.RepoName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFollowerNotification = `-- name: ListFollowerNotification :many
SELECT 
    users.username,users.email,
    follower_notifications.readed,follower_notifications.noti_id,follower_notifications.created_at
FROM 
    users
JOIN
    follower_notifications ON users.user_id = follower_notifications.follower_id
WHERE 
    follower_notifications.user_id=$1 AND (follower_notifications.readed = 'false' OR follower_notifications.created_at >= NOW() - INTERVAL '14 days')
ORDER BY 
    follower_notifications.created_at DESC
LIMIT $2
OFFSET $3
`

type ListFollowerNotificationParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListFollowerNotificationRow struct {
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	Readed    bool      `json:"readed"`
	NotiID    int64     `json:"noti_id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) ListFollowerNotification(ctx context.Context, arg ListFollowerNotificationParams) ([]ListFollowerNotificationRow, error) {
	rows, err := q.db.Query(ctx, listFollowerNotification, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListFollowerNotificationRow{}
	for rows.Next() {
		var i ListFollowerNotificationRow
		if err := rows.Scan(
			&i.Username,
			&i.Email,
			&i.Readed,
			&i.NotiID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRepoNotification = `-- name: ListRepoNotification :many
SELECT 
    users.username,users.email,
    repo_notifications.readed,repo_notifications.noti_id,repo_notifications.created_at,
    repos.repo_id,repos.repo_name
FROM repo_notifications
JOIN repos ON repos.repo_id = repo_notifications.repo_id
JOIN users ON users.user_id = repos.user_id
WHERE repo_notifications.user_id=$1  AND (repo_notifications.readed = 'false' OR repo_notifications.created_at >= NOW() - INTERVAL '14 days')
ORDER BY repo_notifications.created_at DESC
LIMIT $2
OFFSET $3
`

type ListRepoNotificationParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListRepoNotificationRow struct {
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	Readed    bool      `json:"readed"`
	NotiID    int64     `json:"noti_id"`
	CreatedAt time.Time `json:"created_at"`
	RepoID    int64     `json:"repo_id"`
	RepoName  string    `json:"repo_name"`
}

func (q *Queries) ListRepoNotification(ctx context.Context, arg ListRepoNotificationParams) ([]ListRepoNotificationRow, error) {
	rows, err := q.db.Query(ctx, listRepoNotification, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListRepoNotificationRow{}
	for rows.Next() {
		var i ListRepoNotificationRow
		if err := rows.Scan(
			&i.Username,
			&i.Email,
			&i.Readed,
			&i.NotiID,
			&i.CreatedAt,
			&i.RepoID,
			&i.RepoName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSystemNotification = `-- name: ListSystemNotification :many
SELECT system_notifications.noti_id,system_notifications.readed,system_notifications.created_at,
       title,contents,redirect_url
FROM system_notifications
WHERE user_id=$1 AND (system_notifications.readed = 'false' OR system_notifications.created_at >= NOW() - INTERVAL '14 days')
ORDER BY system_notifications.created_at Desc
LIMIT $2
OFFSET $3
`

type ListSystemNotificationParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListSystemNotificationRow struct {
	NotiID      int64       `json:"noti_id"`
	Readed      bool        `json:"readed"`
	CreatedAt   time.Time   `json:"created_at"`
	Title       string      `json:"title"`
	Contents    string      `json:"contents"`
	RedirectUrl pgtype.Text `json:"redirect_url"`
}

func (q *Queries) ListSystemNotification(ctx context.Context, arg ListSystemNotificationParams) ([]ListSystemNotificationRow, error) {
	rows, err := q.db.Query(ctx, listSystemNotification, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSystemNotificationRow{}
	for rows.Next() {
		var i ListSystemNotificationRow
		if err := rows.Scan(
			&i.NotiID,
			&i.Readed,
			&i.CreatedAt,
			&i.Title,
			&i.Contents,
			&i.RedirectUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markCommentNotificationReaded = `-- name: MarkCommentNotificationReaded :one
UPDATE comment_notifications
SET readed = 'true'
WHERE noti_id=$1 and user_id = $2
RETURNING noti_id, user_id, comment_id, readed, created_at
`

type MarkCommentNotificationReadedParams struct {
	NotiID int64 `json:"noti_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) MarkCommentNotificationReaded(ctx context.Context, arg MarkCommentNotificationReadedParams) (CommentNotification, error) {
	row := q.db.QueryRow(ctx, markCommentNotificationReaded, arg.NotiID, arg.UserID)
	var i CommentNotification
	err := row.Scan(
		&i.NotiID,
		&i.UserID,
		&i.CommentID,
		&i.Readed,
		&i.CreatedAt,
	)
	return i, err
}

const markFollowerNotificationReaded = `-- name: MarkFollowerNotificationReaded :one
UPDATE follower_notifications
SET readed = 'true'
WHERE noti_id=$1 and user_id = $2
RETURNING noti_id, user_id, follower_id, readed, created_at
`

type MarkFollowerNotificationReadedParams struct {
	NotiID int64 `json:"noti_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) MarkFollowerNotificationReaded(ctx context.Context, arg MarkFollowerNotificationReadedParams) (FollowerNotification, error) {
	row := q.db.QueryRow(ctx, markFollowerNotificationReaded, arg.NotiID, arg.UserID)
	var i FollowerNotification
	err := row.Scan(
		&i.NotiID,
		&i.UserID,
		&i.FollowerID,
		&i.Readed,
		&i.CreatedAt,
	)
	return i, err
}

const markRepoNotificationReaded = `-- name: MarkRepoNotificationReaded :one
UPDATE repo_notifications
SET readed = 'true'
WHERE noti_id=$1 and user_id = $2
RETURNING noti_id, user_id, repo_id, readed, created_at
`

type MarkRepoNotificationReadedParams struct {
	NotiID int64 `json:"noti_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) MarkRepoNotificationReaded(ctx context.Context, arg MarkRepoNotificationReadedParams) (RepoNotification, error) {
	row := q.db.QueryRow(ctx, markRepoNotificationReaded, arg.NotiID, arg.UserID)
	var i RepoNotification
	err := row.Scan(
		&i.NotiID,
		&i.UserID,
		&i.RepoID,
		&i.Readed,
		&i.CreatedAt,
	)
	return i, err
}

const markSystemNotificationReaded = `-- name: MarkSystemNotificationReaded :one
UPDATE system_notifications
SET readed = 'true'
WHERE noti_id = $1 AND user_id = $2
RETURNING noti_id, user_id, title, contents, redirect_url, readed, created_at
`

type MarkSystemNotificationReadedParams struct {
	NotiID int64 `json:"noti_id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) MarkSystemNotificationReaded(ctx context.Context, arg MarkSystemNotificationReadedParams) (SystemNotification, error) {
	row := q.db.QueryRow(ctx, markSystemNotificationReaded, arg.NotiID, arg.UserID)
	var i SystemNotification
	err := row.Scan(
		&i.NotiID,
		&i.UserID,
		&i.Title,
		&i.Contents,
		&i.RedirectUrl,
		&i.Readed,
		&i.CreatedAt,
	)
	return i, err
}
