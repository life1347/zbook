// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
  session_id,
  user_id,
  refresh_token,
  user_agent,
  client_ip,
  expires_at
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING session_id, user_id, refresh_token, user_agent, client_ip, expires_at, created_at
`

type CreateSessionParams struct {
	SessionID    uuid.UUID `json:"session_id"`
	UserID       int64     `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.SessionID,
		arg.UserID,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const getDailyActiveUserCount = `-- name: GetDailyActiveUserCount :many
SELECT (created_at AT TIME ZONE $1)::date AS registration_date, COUNT(DISTINCT user_id) AS active_users_count
FROM sessions
WHERE  (created_at AT TIME ZONE $1) >= (CURRENT_DATE AT TIME ZONE $1) - ($2 || ' days')::INTERVAL
GROUP BY registration_date
ORDER BY registration_date DESC
`

type GetDailyActiveUserCountParams struct {
	Timezone     string      `json:"timezone"`
	IntervalDays pgtype.Text `json:"interval_days"`
}

type GetDailyActiveUserCountRow struct {
	RegistrationDate pgtype.Date `json:"registration_date"`
	ActiveUsersCount int64       `json:"active_users_count"`
}

func (q *Queries) GetDailyActiveUserCount(ctx context.Context, arg GetDailyActiveUserCountParams) ([]GetDailyActiveUserCountRow, error) {
	rows, err := q.db.Query(ctx, getDailyActiveUserCount, arg.Timezone, arg.IntervalDays)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetDailyActiveUserCountRow{}
	for rows.Next() {
		var i GetDailyActiveUserCountRow
		if err := rows.Scan(&i.RegistrationDate, &i.ActiveUsersCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListSessionCount = `-- name: GetListSessionCount :one
SELECT Count(*) FROM sessions
`

func (q *Queries) GetListSessionCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getListSessionCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getQuerySessionCount = `-- name: GetQuerySessionCount :one
select Count(*)
FROM 
  sessions
JOIN users ON users.user_id = sessions.user_id
WHERE fts_username @@ plainto_tsquery($1)
`

func (q *Queries) GetQuerySessionCount(ctx context.Context, query string) (int64, error) {
	row := q.db.QueryRow(ctx, getQuerySessionCount, query)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getSession = `-- name: GetSession :one
SELECT session_id, user_id, refresh_token, user_agent, client_ip, expires_at, created_at FROM sessions
WHERE session_id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, sessionID uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, sessionID)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const listSession = `-- name: ListSession :many
SELECT 
  session_id, sessions.user_id, refresh_token, user_agent, client_ip, expires_at, sessions.created_at, users.user_id, username, email, hashed_password, blocked, verified, motto, user_role, onboarding, users.created_at, updated_at, unread_count, unread_count_updated_at, fts_username 
FROM 
  sessions
INNER JOIN users ON users.user_id = sessions.user_id
ORDER BY sessions.created_at DESC
LIMIT $1
OFFSET $2
`

type ListSessionParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListSessionRow struct {
	SessionID            uuid.UUID `json:"session_id"`
	UserID               int64     `json:"user_id"`
	RefreshToken         string    `json:"refresh_token"`
	UserAgent            string    `json:"user_agent"`
	ClientIp             string    `json:"client_ip"`
	ExpiresAt            time.Time `json:"expires_at"`
	CreatedAt            time.Time `json:"created_at"`
	UserID_2             int64     `json:"user_id_2"`
	Username             string    `json:"username"`
	Email                string    `json:"email"`
	HashedPassword       string    `json:"hashed_password"`
	Blocked              bool      `json:"blocked"`
	Verified             bool      `json:"verified"`
	Motto                string    `json:"motto"`
	UserRole             string    `json:"user_role"`
	Onboarding           bool      `json:"onboarding"`
	CreatedAt_2          time.Time `json:"created_at_2"`
	UpdatedAt            time.Time `json:"updated_at"`
	UnreadCount          int32     `json:"unread_count"`
	UnreadCountUpdatedAt time.Time `json:"unread_count_updated_at"`
	FtsUsername          string    `json:"fts_username"`
}

func (q *Queries) ListSession(ctx context.Context, arg ListSessionParams) ([]ListSessionRow, error) {
	rows, err := q.db.Query(ctx, listSession, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSessionRow{}
	for rows.Next() {
		var i ListSessionRow
		if err := rows.Scan(
			&i.SessionID,
			&i.UserID,
			&i.RefreshToken,
			&i.UserAgent,
			&i.ClientIp,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UserID_2,
			&i.Username,
			&i.Email,
			&i.HashedPassword,
			&i.Blocked,
			&i.Verified,
			&i.Motto,
			&i.UserRole,
			&i.Onboarding,
			&i.CreatedAt_2,
			&i.UpdatedAt,
			&i.UnreadCount,
			&i.UnreadCountUpdatedAt,
			&i.FtsUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const querySession = `-- name: QuerySession :many
SELECT 
  sessions.session_id, sessions.user_id, sessions.refresh_token, sessions.user_agent, sessions.client_ip, sessions.expires_at, sessions.created_at,
  ts_rank(users.fts_username, plainto_tsquery($3)) as rank,
  users.user_id, users.username, users.email, users.hashed_password, users.blocked, users.verified, users.motto, users.user_role, users.onboarding, users.created_at, users.updated_at, users.unread_count, users.unread_count_updated_at, users.fts_username
FROM 
  sessions
JOIN users ON users.user_id = sessions.user_id
WHERE fts_username @@ plainto_tsquery($3)
ORDER BY
  rank DESC,
  sessions.created_at DESC
LIMIT $1
OFFSET $2
`

type QuerySessionParams struct {
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
	Query  string `json:"query"`
}

type QuerySessionRow struct {
	SessionID            uuid.UUID `json:"session_id"`
	UserID               int64     `json:"user_id"`
	RefreshToken         string    `json:"refresh_token"`
	UserAgent            string    `json:"user_agent"`
	ClientIp             string    `json:"client_ip"`
	ExpiresAt            time.Time `json:"expires_at"`
	CreatedAt            time.Time `json:"created_at"`
	Rank                 float32   `json:"rank"`
	UserID_2             int64     `json:"user_id_2"`
	Username             string    `json:"username"`
	Email                string    `json:"email"`
	HashedPassword       string    `json:"hashed_password"`
	Blocked              bool      `json:"blocked"`
	Verified             bool      `json:"verified"`
	Motto                string    `json:"motto"`
	UserRole             string    `json:"user_role"`
	Onboarding           bool      `json:"onboarding"`
	CreatedAt_2          time.Time `json:"created_at_2"`
	UpdatedAt            time.Time `json:"updated_at"`
	UnreadCount          int32     `json:"unread_count"`
	UnreadCountUpdatedAt time.Time `json:"unread_count_updated_at"`
	FtsUsername          string    `json:"fts_username"`
}

func (q *Queries) QuerySession(ctx context.Context, arg QuerySessionParams) ([]QuerySessionRow, error) {
	rows, err := q.db.Query(ctx, querySession, arg.Limit, arg.Offset, arg.Query)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []QuerySessionRow{}
	for rows.Next() {
		var i QuerySessionRow
		if err := rows.Scan(
			&i.SessionID,
			&i.UserID,
			&i.RefreshToken,
			&i.UserAgent,
			&i.ClientIp,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.Rank,
			&i.UserID_2,
			&i.Username,
			&i.Email,
			&i.HashedPassword,
			&i.Blocked,
			&i.Verified,
			&i.Motto,
			&i.UserRole,
			&i.Onboarding,
			&i.CreatedAt_2,
			&i.UpdatedAt,
			&i.UnreadCount,
			&i.UnreadCountUpdatedAt,
			&i.FtsUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
