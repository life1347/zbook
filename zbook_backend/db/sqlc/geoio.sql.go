// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: geoio.sql

package db

import (
	"context"
	"net/netip"
)

const getGeoInfo = `-- name: GetGeoInfo :one
SELECT  geoip_id, ip_range_cidr, city_name_en, city_name_zh_cn, latitude, longitude
FROM
    geoip
WHERE
    $1::inet << ip_range_cidr
`

func (q *Queries) GetGeoInfo(ctx context.Context, dollar_1 netip.Addr) (Geoip, error) {
	row := q.db.QueryRow(ctx, getGeoInfo, dollar_1)
	var i Geoip
	err := row.Scan(
		&i.GeoipID,
		&i.IpRangeCidr,
		&i.CityNameEn,
		&i.CityNameZhCn,
		&i.Latitude,
		&i.Longitude,
	)
	return i, err
}

const getGeoInfoBatch = `-- name: GetGeoInfoBatch :many
SELECT geoip_id, ip_range_cidr, city_name_en, city_name_zh_cn, latitude, longitude
FROM geoip
WHERE ip_range_cidr && ANY($1::inet[])
`

func (q *Queries) GetGeoInfoBatch(ctx context.Context, dollar_1 []netip.Addr) ([]Geoip, error) {
	rows, err := q.db.Query(ctx, getGeoInfoBatch, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Geoip{}
	for rows.Next() {
		var i Geoip
		if err := rows.Scan(
			&i.GeoipID,
			&i.IpRangeCidr,
			&i.CityNameEn,
			&i.CityNameZhCn,
			&i.Latitude,
			&i.Longitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
